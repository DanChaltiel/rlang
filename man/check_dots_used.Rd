% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dots-ellipsis.R
\name{check_dots_used}
\alias{check_dots_used}
\title{Check that all dots have been used}
\usage{
check_dots_used(env = caller_env(), call = caller_env(), action = abort)
}
\arguments{
\item{env}{Environment in which to look for \code{...} and to set up handler.}

\item{call}{The execution environment of a currently
running function. When an error occurs, the corresponding
function call (see \code{\link[=sys.call]{sys.call()}}) is retrieved and stored as
\code{call} field in the error object to provide users with contextual
information about the error.

Can also be \code{NULL} or a function call to respectively disable the
contextual call or hard-code it.

See also \code{\link[=local_error_call]{local_error_call()}} for an alternative way of
providing this information.}

\item{action}{The action to take when the dots have not been used. One of
\code{\link[=abort]{abort()}}, \code{\link[=warn]{warn()}}, \code{\link[=inform]{inform()}} or \code{\link[=signal]{signal()}}.}
}
\description{
Automatically sets exit handler to run when function terminates, checking
that all elements of \code{...} have been evaluated. If you use \code{\link[=on.exit]{on.exit()}}
elsewhere in your function, make sure to use \code{add = TRUE} so that you
don't override the handler set up by \code{check_dots_used()}.
}
\examples{
f <- function(...) {
  check_dots_used()
  g(...)
}

g <- function(x, y, ...) {
  x + y
}
f(x = 1, y = 2)

try(f(x = 1, y = 2, z = 3))
try(f(x = 1, y = 2, 3, 4, 5))
}
