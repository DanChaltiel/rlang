% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dots-ellipsis.R
\name{check_dots_empty}
\alias{check_dots_empty}
\title{Check that dots are empty}
\usage{
check_dots_empty(env = caller_env(), call = caller_env(), action = abort)
}
\arguments{
\item{env}{Environment in which to look for \code{...}.}

\item{call}{An expression (as returned by e.g.
\code{sys.call()}) representing the context in which the error
occurred. If non-null, the call is stripped from its arguments to
keep it simple.

Can also be an execution environment of a currently running
function (as returned by e.g. \code{parent.frame()}). The
corresponding call is then retrieved.

See also \code{\link[=local_error_call]{local_error_call()}}.}

\item{action}{The action to take when the dots have not been used. One of
\code{\link[=abort]{abort()}}, \code{\link[=warn]{warn()}}, \code{\link[=inform]{inform()}} or \code{\link[=signal]{signal()}}.}
}
\description{
Sometimes you just want to use \code{...} to force your users to fully name
the details arguments. This function fails if \code{...} is not empty.
}
\examples{
f <- function(x, ..., foofy = 8) {
  check_dots_empty()
  x + foofy
}

# This fails because `foofy` can't be matched positionally
try(f(1, 4))

# This fails because `foofy` can't be matched partially by name
try(f(1, foof = 4))

# Thanks to `...`, it must be matched exactly
f(1, foofy = 4)
}
