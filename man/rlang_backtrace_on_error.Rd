% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cnd-abort.R
\name{rlang_backtrace_on_error}
\alias{rlang_backtrace_on_error}
\alias{add_backtrace}
\title{Display backtrace on error}
\description{
Errors thrown with \code{\link[=abort]{abort()}} automatically save a backtrace that
can be inspected by calling \code{\link[=last_error]{last_error()}}. Optionally, you can
also display the backtrace alongside the error message by setting
the option \code{rlang_backtrace_on_error} to one of the following
values:
\itemize{
\item \code{"reminder"}: Display a reminder that the backtrace can be
inspected by calling \code{\link[=last_error]{last_error()}}.
\item \code{"branch"}: Display a simplified backtrace.
\item \code{"collapse"}: Display a collapsed backtrace tree.
\item \code{"full"}: Display the full backtrace tree.
}

If this option is not set, the default depends on whether the
session is interactive as determined by \code{\link[=is_interactive]{is_interactive()}}.
In interactive sessions, the default is \code{"reminder"} so that the
interested user is prompted to run \code{last_error()} to get more
information. In non-interactive sessions, the default is \code{"full"}
to provide users with as much debugging info as available.
}
\section{Promote base errors to rlang errors}{


Call \code{options(error = rlang::entrace)} to instrument base
errors with rlang features. This handler does two things:
\itemize{
\item It saves the base error as an rlang object. This allows you to
call \code{\link[=last_error]{last_error()}} to print the backtrace or inspect its data.
\item It prints the backtrace for the current error according to the
\code{rlang_backtrace_on_error} option.
}
}

\section{Backtraces in knitr}{


An \code{rlang_error} method for the \code{knitr::sew()} generic is
registered to make it possible to display backtraces with captured
errors (\code{error = TRUE} chunks).

In \code{error = TRUE} chunks, the default value for
\code{rlang_backtrace_on_error} is \code{"none"}. You can override it by
setting this option in your document, e.g. to \code{"reminder"} or
\code{"full"}.

When knitr is running (as determined by the \code{knitr.in.progress}
global option), the default top environment for backtraces is set
to the chunk environment \code{knitr::knit_global()}. This ensures that
the part of the call stack belonging to knitr does not end up in
backtraces. You can override this by setting the
\code{rlang_trace_top_env} global option or by supplying the \code{top}
argument to \code{\link[=trace_back]{trace_back()}}.
}

\examples{
# Display a simplified backtrace on error for both base and rlang
# errors:

# options(
#   rlang_backtrace_on_error = "branch",
#   error = rlang::entrace
# )
# stop("foo")
}
