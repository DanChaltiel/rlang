% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cnd-abort.R
\name{error_call}
\alias{error_call}
\alias{format_error_call}
\title{Validate and format a function call for use in error messages}
\usage{
error_call(call)

format_error_call(call)
}
\arguments{
\item{call}{The execution environment of a currently
running function. When an error occurs, the corresponding
function call (see \code{\link[=sys.call]{sys.call()}}) is retrieved and stored as
\code{call} field in the error object to provide users with contextual
information about the error.

When you are writing an input checker function and need to pass
along \code{call}, you should generally use \code{caller_env()} as default,
e.g. \code{call = caller_env()} or \code{error_call = caller_env()}.

Can also be \code{NULL} or a function call to respectively disable the
contextual call or hard-code it.

See also \code{\link[=local_error_call]{local_error_call()}} for an alternative way of
providing this information.}
}
\value{
Either a string formatted as code or \code{NULL} if \code{call} or
the result of \code{error_call(call)} is \code{NULL}.
}
\description{
\itemize{
\item \code{format_error_call()} passes its input to \code{error_call()} and
formats the result as code. Use this function if you are
generating the "in" part of an error message from a stack frame
call.
\item \code{error_call()} creates a function call ready to be used as \code{call}
field of error conditions. This field is displayed by \code{\link[=stop]{stop()}}
and \code{\link[=abort]{abort()}} to give context to an error message.

If passed a function call, the arguments are stripped. Complex
function calls containing inlined objects return \code{NULL}. If
passed an environment, the corresponding \code{sys.call()} is taken as
call, unless there is a local flag (see \code{\link[=local_error_call]{local_error_call()}}).
}
}
\examples{
# Arguments are stripped
error_call(quote(foo(bar, baz)))
writeLines(format_error_call(quote(foo(bar, baz))))

# Returns `NULL` with complex calls such as those that contain
# inlined functions
error_call(call2(list))
}
\keyword{internal}
