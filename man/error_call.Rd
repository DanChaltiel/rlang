% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cnd-abort.R
\name{error_call}
\alias{error_call}
\alias{format_error_call}
\title{Validate and format a function call for use in error messages}
\usage{
error_call(call)

format_error_call(call)
}
\arguments{
\item{call}{The execution environment of a currently
running function, e.g. \code{caller_env()}. The function will be
mentioned in error messages as the source of the error. See the
\code{call} argument of \code{\link[=abort]{abort()}} for more information.}
}
\value{
Either a string formatted as code or \code{NULL} if \code{call} or
the result of \code{error_call(call)} is \code{NULL}.
}
\description{
\itemize{
\item \code{format_error_call()} passes its input to \code{error_call()} and
formats the result as code (using cli if available). Use this
function if you are generating the "in" part of an error message
from a stack frame call.
\item \code{error_call()} creates a function call ready to be used as the
\code{call} field of error conditions. This field is displayed by
\code{\link[=stop]{stop()}} and \code{\link[=abort]{abort()}} to give context to an error message.  The
call is simplified for formatting (see section below). If a
complex call can't be simplified, \code{error_call()} returns \code{NULL}.
}

If passed an environment, the corresponding \code{sys.call()} is taken
as call, unless there is a local flag (see \code{\link[=local_error_call]{local_error_call()}}).
}
\section{Details of formatting}{

\itemize{
\item The arguments of function calls are stripped.
\item Complex function calls containing inlined objects return
\code{NULL}.
\item Calls to \code{if} preserve the condition since it might be
informative. Branches are dropped.
\item Calls to operators and other special syntax are formatted using
their names rather than the potentially confusing function form.
}
}

\examples{
# Arguments are stripped
error_call(quote(foo(bar, baz)))
writeLines(format_error_call(quote(foo(bar, baz))))

# Returns `NULL` with complex calls such as those that contain
# inlined functions
error_call(call2(list))

# Operators are formatted using their names rather than in
# confusing function call form
error_call(quote(1 + 2))
format_error_call(quote(1 + 2))
}
\keyword{internal}
