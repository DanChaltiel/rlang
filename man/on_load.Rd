% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aaa.R
\name{on_load}
\alias{on_load}
\alias{run_on_load}
\title{Run expressions on load}
\usage{
on_load(expr, env = parent.frame(), ns = topenv(env))

run_on_load(ns = topenv(parent.frame()))
}
\arguments{
\item{expr}{An expression to run on load.}

\item{env}{The environment in which to evaluate \code{expr}. Defaults to
the current environment, which is your package namespace if you
run \code{on_load()} at top level.}

\item{ns}{The namespace in which to hook \code{expr}.}
}
\description{
\code{on_load()} registers expressions to be run on the user's machine
each time the package is loaded in memory. This is by contrast to
normal R package code which is run once at build time on the
packager's machine (e.g. CRAN). There are two main use cases for
running expressions on load:
\enumerate{
\item When a side effect, such as registering a method with
\code{s3_register()}, must occur oi the user session rather than the
builder session machine.
\item To avoid hard-coding objects from other packages in your
namespace. If you assign \code{foo::bar} or the result of
\code{foo::baz()} in your package, they become constants. Any
upstream changes in the \code{foo} package will not be reflected in
the objects you've assigned in your namespace. This often breaks
assumptions made by the authors of \code{foo} and causes all sorts of
issues.

Recreating the foreign objects each time your package is loaded
makes sure that any such changes will be taken into account. In
technical terms, running an expression on load introduces
\emph{indirection}.
}

\code{on_load()} expressions require \code{run_on_load()} to be called inside
\code{\link[=.onLoad]{.onLoad()}}.
}
\section{Comparison with \code{.onLoad()}}{

\code{on_load()} has the advantage that hooked expressions can appear in
any file, in context. This is unlike \code{.onLoad()} which gathers
disparate expressions in a single block.

\code{on_load()} is implemented via \code{.onLoad()} and requires
\code{run_on_load()} to be called from that hook.
}

\examples{
quote({  # Not run

# First add `run_on_load()` to your `.onLoad()` hook,
# then use `on_load()` anywhere in your package
.onLoad <- function(lib, pkg) {
  run_on_load()
}

# Register a method on load
on_load(s3_register("foo::bar", "my_class"))

# Assign an object on load
var <- NULL
on_load(
  var <- foo()
)

})
}
